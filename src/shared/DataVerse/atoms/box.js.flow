// @flow
import type {AddressedChangeset, MapKey, True, False} from '$shared/DataVerse/types'
import type {default as Tappable} from '$shared/DataVerse/utils/Tappable'
import type {IDerivation} from '$shared/DataVerse/derivations/types'

export type BoxAtomChangeType<V> = V
export type BoxAtomDeepChangeType<V> = AddressedChangeset & {type: 'BoxChange', newValue: BoxAtomChangeType<V>}
export type BoxAtomDeepDiffType<V> = AddressedChangeset & {type: 'BoxDiff', oldValue: V, newValue: V}

export type IsBoxAtom<V> = $ElementType<V, 'isBoxAtom'>

export type IBoxAtom<V> = {
  isDictAtom: False,
  isBoxAtom: True,
  isArrayAtom: False,
  isAtom: True,
  isCompositeAtom: False,
  isPointer: False,

  _value: V,
  unboxDeep(): mixed,
  getValue(): V,
  set(v: V): IBoxAtom<V>,
  deepChanges(): Tappable<BoxAtomDeepChangeType<V>>,
  deepDiffs(): Tappable<BoxAtomDeepDiffType<V>>,
  changes(): Tappable<V>,

  derivation(): IDerivation<V>,

  _setParent(p: $FixMe, key: MapKey): void,
  _unsetParent(): void,
  getParent(): ?$FixMe,
}

declare function box<V>(V): IBoxAtom<V>
export default box

declare var BoxAtom: Class<$FixMe>
export {BoxAtom}