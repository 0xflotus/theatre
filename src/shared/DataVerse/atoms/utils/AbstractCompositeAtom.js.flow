// @flow
import type {IAtom} from './AbstractAtom'
import type {BoxAtomDeepChangeType, BoxAtomDeepDiffType} from '../box'
import type {DictAtomDeepChangeType, DictAtomDeepDiffType} from '../dict'
import type {ArrayAtomDeepChangeType, ArrayAtomDeepDiffType} from '../array'
import type {True, MapKey} from '$shared/DataVerse/types'
import type {default as Tappable} from '$shared/DataVerse/utils/Tappable'

export type AllDeepChangeTypes = BoxAtomDeepChangeType<any> | DictAtomDeepChangeType<any> | ArrayAtomDeepChangeType<any>
export type AllDeepDiffTypes = BoxAtomDeepDiffType<any> | DictAtomDeepDiffType<any> | ArrayAtomDeepDiffType<any>

export type ICompositeAtom = IAtom & {
  isCompositeAtom: True,
  isAtom: True,
  deepChanges(): Tappable<AllDeepChangeTypes>, // deep changes. Includes an address
  deepDiffs(): Tappable<AllDeepDiffTypes>, // Unboxed changeset, from oldValue to newValue, including an address, deep
  _adopt(key: MapKey, value: IAtom): void,
  _unadopt(key: MapKey, value: IAtom): void,
}