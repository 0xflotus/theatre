@value nodeHeight: 30px;
@value nodeMargin: 0;
@value hoverBarColor: #3CDFFF;
@value nodePadding: 8px;
@value nodeIndent: 16px;

.container {
  position: relative;
  --colorOffset: var(--depth) * 8 - 10;
  --colorCoords:
    calc(59 + var(--colorOffset)),
    calc(70 + var(--colorOffset)),
    calc(76 + var(--colorOffset));
  --color: rgb(var(--colorCoords)); 

  --highlightColor: rgba(60, 223, 255, .1);

  &:hover {
    background: var(--color);
  }

  &.isCommandDown {
    cursor: cell;
  }

  &.indicateDropPossible {
    cursor: alias !important;

    & * {
      cursor: alias !important;
    }
  }

  &.indicateDropNotPossible {
    cursor: no-drop !important;

    & * {
      cursor: no-drop !important;
    }
  }

  &.appear {
    max-height: 0;
    animation: containerAppear .2s ease-out forwards;
  }

  &.isRelocated {
    z-index: 1000;
    overflow: hidden;
    max-height: nodeHeight;
    width: var(--originalWidth);
    top: var(--initialTopOffset);
    left: var(--initialLeftOffset);
    background: var(--color);
    animation:
      containerDropHeightAndTop .3s ease-out forwards,
      containerDropWidthAndLeft .25s .05s ease-out forwards,
      containerDropBackground .7s ease-out forwards;
  }

  &.relocationCanceled {
    z-index: 1000;
    overflow: hidden;
    max-height: 0;
    background: var(--color);
    animation:
      containerDropCancelHeight .3s ease-out forwards,
      containerDropBackground .7s ease-out forwards;
  }

  &.isCollapsed {
    overflow: hidden;
    animation: containerCollapse .25s ease-out forwards;
  }

  &.isBeingDragged {
    overflow: hidden;
    opacity: 0;
    animation: containerCollapse .3s ease-out forwards;
  }
}

.rootWrapper {
  position: relative;
  height: nodeHeight;
  width: 100%;
  &.isCommandDown, &.isANodeBeingDragged {
    &:hover {
      &:after {
        display: block;
        position: absolute;
        content: ' ';
        height: 2px;
        bottom: 0;
        left: calc(nodeIndent + nodePadding);
        right: 0;
        background-color: hoverBarColor;
      }
    }
  }
}

.container.appear > .rootWrapper {
  transform-origin: 0 0;
  animation: rootWrapperAppear .2s cubic-bezier(0.3, 0, 0.5, 1.5) forwards;
}

.container.isSelected > .rootWrapper {
  background: #11a4d6;
  z-index: 1000;
}

.container.isRelocated > .rootWrapper {
  opacity: 1;
  max-height: nodeHeight;
  &:before {
    display: block;
    position: absolute 0 0 0 0;
    content: ' ';
    pointer-events: none;
    background: rgb(46, 166, 190);
    opacity: 0.9;
    animation: rootWrapperDrop .2s ease-in forwards;
  }
}

.container.isCommandDown:hover > .rootWrapper.isCommandDown,
.container.isANodeBeingDragged:hover > .rootWrapper.isANodeBeingDragged,
{
  background: var(--highlightColor) !important;
}

.container.appear > .rootWrapper > .root {
  opacity: 0;
  animation: rootAppear .15s .15s ease-in-out forwards;
}

.childContainer {
  position: relative;
  width: 100%;
  display: grid;
  grid-template-columns: nodeIndent 1fr;
  grid-gap: 0;
  grid-template-rows: 1fr nodeMargin;
}

.child {
  grid-column: 2;
  grid-row: 1;
}

.hoverSensor {
  position: relative;
  grid-column: 1;
  grid-row: 1 / span 2;

  &.isCommandDown, &.isANodeBeingDragged {
    &:hover{
      & ~ .siblingIndicator {
        &:after {
          display: block;
          position: absolute;
          content: ' ';
          height: 2px;
          top: -1px;
          left: nodePadding;
          right: 0;
          background-color: hoverBarColor;
        }
      }
    }
  }
}

.siblingIndicator {
  position: relative;
  grid-column: 2;
  grid-row: 2;

  z-index: 10000;
}

@keyframes containerAppear {
  from {max-height: 0;}
  to {max-height: nodeHeight;}
}

@keyframes rootWrapperAppear {
  from {transform: scaleY(0);}
  to {transform: scaleY(1);}
}

@keyframes rootAppear {
  from {opacity: 0;}
  to {opacity: 1;}
}

@keyframes containerCollapse {
  0% {max-height: var(--maxHeight);}
  100% {max-height: 0;}
}

@keyframes rootWrapperCollapse {
  from {max-height: nodeHeight;}
  to {max-height: 0;}
}

@keyframes containerDropHeightAndTop {
  0% {
    top: var(--initialTopOffset);
    max-height: nodeHeight;
  }
  100% {
    top: 0;
    max-height: var(--maxHeight);
  }
}

@keyframes containerDropWidthAndLeft {
  0% {
    left: var(--initialLeftOffset);
    width: var(--originalWidth);
  }
  100% {
    left: 0;
    width: var(--targetWidth);
  }
}

@keyframes containerDropBackground {
  0% {
    background: var(--color);
  }
  80% {
    background: var(--color);
  }
  100% {
    background: none;
    overflow: visible;
  }
}

@keyframes containerDropCancelHeight {
  0% {
    max-height: 0;
  }
  100% {
    max-height: var(--maxHeight);
  }
}

@keyframes rootWrapperDrop {
  0% {
    opacity: 0.9;
  }
  100% {
    opacity: 0;
  }
}
