@value nodeHeight: 27px;
@value nodeMargin: 0;
@value hoverBarColor: #3CDFFF;
@value nodePadding: 8px;
@value nodeIndent: 16px;

.container {
  position: relative;
  --color: rgb(
    calc(39 - var(--depth) * 4 - 4),
    calc(50 - var(--depth) * 4 - 4),
    calc(56 - var(--depth) * 4 - 4)
  );
  --highlightColor: rgba(60, 223, 255, .1);

  &:hover {
    background: var(--color);
  }

  &.isCommandDown {
    cursor: cell;
  }

  &.indicateDropPossible {
    cursor: alias;
  }

  &.indicateDropNotPossible {
    cursor: no-drop;

    & * {
      cursor: no-drop;
    }
  }

  &.appear {
    max-height: 0;
    animation: containerAppear .2s ease-out forwards;
  }

  &.isRelocated {
    --shadow: calc(var(--depth) * 20 + 10);
    z-index: 1000;
    animation: drop .3s ease-in-out forwards;
  }

  &.isCollapsed {
    overflow: hidden;
    animation: containerCollapse .25s ease-out forwards;
  }

  &.isBeingDragged {
    overflow: hidden;
    opacity: 0;
    animation: containerCollapse .3s ease-out forwards;
  }
}

.rootWrapper {
  position: relative;
  height: nodeHeight;
  width: 100%;
  // overflow: hidden;

  &.isCommandDown, &.isANodeBeingDragged {
    &:hover {
      &:after {
        display: block;
        position: absolute;
        content: ' ';
        height: 2px;
        bottom: 0;
        left: calc(nodeIndent + nodePadding);
        right: 0;
        background-color: hoverBarColor;
      }
    }
  }
}

.container.appear > .rootWrapper {
  transform-origin: 0 0;
  animation: rootWrapperAppear .2s cubic-bezier(0.3, 0, 0.5, 1.5) forwards;
}

.container.isSelected > .rootWrapper {
  background: #0e1315;
  z-index: 1000;
}

.container.isCommandDown:hover > .rootWrapper.isCommandDown,
.container.isANodeBeingDragged:hover > .rootWrapper.isANodeBeingDragged,
{
  background: var(--highlightColor) !important;
}

.container.appear > .rootWrapper > .root {
  opacity: 0;
  animation: rootAppear .15s .15s ease-in-out forwards;
}

/*.container.isCollapsed > .rootWrapper {
  animation: rootWrapperCollapse .15s .15s ease-in-out forwards;  
}*/

.childContainer {
  position: relative;
  width: 100%;
  display: grid;
  grid-template-columns: nodeIndent 1fr;
  grid-gap: 0;
  grid-template-rows: 1fr nodeMargin;
}

.child {
  grid-column: 2;
  grid-row: 1;
}

.hoverSensor {
  position: relative;
  grid-column: 1;
  grid-row: 1 / span 2;

  &.isCommandDown, &.isANodeBeingDragged {
    &:hover{
      & ~ .siblingIndicator {
        &:after {
          display: block;
          position: absolute;
          content: ' ';
          height: 2px;
          top: -1px;
          left: nodePadding;
          right: 0;
          background-color: hoverBarColor;
        }
      }
    }
  }
}

.siblingIndicator {
  position: relative;
  grid-column: 2;
  grid-row: 2;

  z-index: 10000;
}

@keyframes containerAppear {
  from {max-height: 0;}
  to {max-height: nodeHeight;}
}

@keyframes rootWrapperAppear {
  from {transform: scaleY(0);}
  to {transform: scaleY(1);}
}

@keyframes rootAppear {
  from {opacity: 0;}
  to {opacity: 1;}
}

@keyframes containerCollapse {
  0% {max-height: var(--maxHeight);}
  // 50% {max-height: nodeHeight;}
  100% {max-height: 0;}
}

@keyframes rootWrapperCollapse {
  from {max-height: nodeHeight;}
  to {max-height: 0;}
}

@keyframes drop {
  from {
    top: var(--initialTopOffset);
    max-height: nodeHeight;
    box-shadow: 0 0 20px 5px rgb(var(--shadow), var(--shadow), var(--shadow));
  }
  to {
    top: 0;
    max-height: var(--maxHeight);
    box-shadow: none;
  }
}
